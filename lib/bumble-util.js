// Generated by CoffeeScript 1.9.3

/*
  utils for node.js scripts, cake tasks, grunt tasks
 */

(function() {
  var BStr, HOME_DIR, LAST_NPM_INSTALL_FILE, _, child_process, fs, handleError, installNodePackage, moment, npmInstall, openTerminalTab, path, systemCmd;

  child_process = require("child_process");

  path = require('path');

  fs = require('fs');

  _ = require('underscore');

  moment = require('moment');

  BStr = require('bumble-strings');

  HOME_DIR = process.env.HOME;


  /*
    Syncronously executes a system command with command and output echo to console.
    
    Returns the output of the command as a string.
   */

  systemCmd = function(cmd, options) {
    var e, out;
    if (options == null) {
      options = {};
    }
    options = _.defaults(options, {
      failOnError: true,
      echo: true,
      showOutput: true
    });
    if (options.echo) {
      console.log("$ " + cmd);
    }
    try {
      out = child_process.execSync(cmd);
      if (options.showOutput) {
        process.stdout.write(out);
      }
    } catch (_error) {
      e = _error;
      if (options.showOutput) {
        console.error(e);
      }
      if (options.failOnError) {
        throw e;
      }
    }
    return out.toString();
  };


  /*
    Generic error handler that checks passed in error, from node fs functions for example, 
    and if there is an error, send it to console.error() and exit this process.
   */

  handleError = function(error) {
    if (!error) {
      return;
    }
    console.error(error);
    return process.exit(1);
  };

  LAST_NPM_INSTALL_FILE = './.lastNpmInstall';


  /*
    runs an `npm install` if we see that the package.json is newer than the last time called
    or if the node_modules directory doesn't exist
   */

  npmInstall = function() {
    var lastTimeStamp, packageFileMtime;
    if (!Fs.existsSync('package.json')) {
      return;
    }
    packageFileMtime = Moment(Fs.statSync('package.json').mtime);
    try {
      lastTimeStamp = Moment(parseInt(Fs.readFileSync(LAST_NPM_INSTALL_FILE)));
    } catch (_error) {}
    if ((lastTimeStamp == null) || !Fs.existsSync('node_modules') || packageFileMtime.isAfter(lastTimeStamp)) {
      console.log('running npm install (this may take a while the first time)');
      systemCmd('npm install');
      return Fs.writeFileSync(LAST_NPM_INSTALL_FILE, packageFileMtime.valueOf());
    } else {
      return console.log('no newer changes to package.json');
    }
  };

  installNodePackage = function(packageName, options) {
    var cmd, packageExists;
    if (options == null) {
      options = {};
    }
    options = _.defaults(options, {
      global: false,
      addFlags: ""
    });
    cmd = "";
    if (options.global) {
      cmd += "sudo ";
    }
    cmd += "npm install ";
    if (options.global) {
      cmd += "-g ";
    }
    cmd += options.addFlags;
    if (!BStr.endsWith(options.addFlags, " ")) {
      cmd += " ";
    }
    cmd += packageName;
    packageExists = fs.existsSync("/usr/local/lib/node_modules/" + packageName) || fs.existsSync("/opt/nodejs/current/lib/node_modules/" + packageName) || fs.existsSync("./node_modules/" + packageName);
    if (!packageExists) {
      if (options.global) {
        console.log('you may be asked to enter your sudo password');
      }
      return systemCmd(cmd);
    }
  };


  /*
    Open a terminal tab (ONLY WORKS ON iterm2 or terminal apps on OSX)
   */

  openTerminalTab = function(cdPath, cmd) {
    if (cdPath == null) {
      cdPath = './';
    }
    if (cmd == null) {
      cmd = '';
    }
    cdPath = path.resolve(cdPath);
    console.log("opening terminal tab. maybe. to " + cdPath + ". TERM_PROGRAM='" + process.env.TERM_PROGRAM + "'");
    switch (process.env.TERM_PROGRAM) {
      case 'iTerm.app':
        return systemCmd("osascript 2>/dev/null -e '\n  tell application \"iTerm\"\n    tell current terminal\n      launch session \"Default Session\"\n      delay .5\n      tell the last session\n        write text \"cd " + cdPath + "\"\n        if \"" + cmd + "\" is not equal \"\" then\n          write text \"" + cmd + "\"\n        end if\n      end tell\n    end tell\n  end tell\n'", {
          echo: false
        });
      case 'Apple_Terminal':
        return systemCmd("osascript 2>/dev/null -e '\n  tell application \"Terminal\"\n    activate\n    tell application \"System Events\" to keystroke \"t\" using command down\n    repeat while contents of selected tab of window 1 starts with linefeed\n      delay 0.01\n    end repeat\n    do script \"cd " + cdPath + "\" in window 1\n    if \"" + cmd + "\" is not equal \"\" then\n      do script \"" + cmd + "\" in window 1\n    end if\n  end tell\n'", {
          echo: false
        });
      default:
        return console.log("Sorry... unknown terminal type: " + process.env.TERM_PROGRAM);
    }
  };

  module.exports = {
    systemCmd: systemCmd,
    handleError: handleError,
    npmInstall: npmInstall,
    installNodePackage: installNodePackage,
    openTerminalTab: openTerminalTab
  };

}).call(this);
